@page "/tools/lists/list-transformer"
@using DbMilos.Domain.Interfaces
@using DbMilos.Domain.ListTransformer
@inject IListParser listParser
@inject IListTransformer listTransformer
@rendermode InteractiveServer
<PageTitle>List Transformer</PageTitle>
<div>
    <h2>List Transformer</h2>
    <p>Enter your list items, choose separator and modify all of them in one click.</p>
    @switch(CurrentStep)
    {
        case 0:
            <div>
                
            </div>
            break;
        case 1:
            <div>
                <ListTransformerDataInput @bind-UserInput=@UserInput
                                          @bind-Separator=@Separator></ListTransformerDataInput>
            </div>
            break;
        case 2:
            <div>
                <ListTransformerOperationsSelect @bind-SelectedOperation="Operation"></ListTransformerOperationsSelect>
            </div>
            break;
        case 3:
            <div>
                <h3>Result</h3>
                <p>
                    @string.Join(Separator,Result)
                </p>
            </div>
            break;
    }
    <div>
        @if(CurrentStep > 0){
            <button class="btn btn-secondary" @onclick="()=>{CurrentStep--;}">Prev</button>
        }
        @if (CurrentStep < NumberOfSteps)
        {
            <button class="btn btn-primary" @onclick="()=>{CurrentStep++;}">Next</button>
        }
    </div>
    @* <div>
        output
        <code>
            @UserInput
        </code>
        <code>
            @Separator
        </code>
        <code>
            @Operation
        </code>
        <code>
            @string.Join(Separator,Result);
        </code>
    </div> *@
</div>
@code {
    public int NumberOfSteps { get; set; } = 3;
    private int currentStep = 0;
    public int CurrentStep
    {
        get { return currentStep; }
        set {
            currentStep = value;
            if(currentStep == NumberOfSteps)
            {
                Result = MakeResult(UserInput, Separator);
            }
        }
    }
    //
    public List<string> Result { get; set; } = new List<string>();
    public List<string> MakeResult(string userInput, string separator)
    {
        var parsedItems = listParser.ParseItems(userInput, separator);
        var items = new List<string>();
        switch(Operation)
        {
            case ListTransformerOperations.ToLowercase:
                items = listTransformer.ToLowercase(parsedItems);
                break;
            case ListTransformerOperations.ToPascalCase:
                items = listTransformer.ToPascalCase(parsedItems);
                break;
            default:
                items = listTransformer.ToUppercase(parsedItems);
                break;

        }
        return items;
    }
    //
    public string UserInput { get; set; } = "coffee,milk,ice cream";

    public string Separator { get; set; } = ",";

    public ListTransformerOperations Operation { get; set; } = ListTransformerOperations.ToUppercase;
}